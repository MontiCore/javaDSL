description = "MontiCore: Java DSL EMF"

def srcMainDir = "$buildDir/copied-sources/main"
def srcTestDir = "$buildDir/copied-sources/test"

def grammarsDir = "${project(":javaDSL").projectDir}/src/main/grammars"

sourceSets {
    main.java.srcDirs("$srcMainDir/java", "$buildDir/generated-sources/monticore/sourcecode")
    test.java.srcDirs("$srcTestDir/java")

    grammars {
        resources {
            srcDir(grammarsDir)
            include "**/*.mc4"
        }
    }
}

java {
    registerFeature("grammars") {
        usingSourceSet(sourceSets.grammars)
    }
}

task copyMainSources(type: Copy) {
    destinationDir = file srcMainDir
    from "${project(':javaDSL').projectDir}/src/main"
}

task copyTestSources(type: Copy) {
    destinationDir = file srcTestDir
    from "${project(':javaDSL').projectDir}/src/main"
}

task generate(type: MCTask) {
    dependsOn(copyMainSources, copyTestSources)

    grammar = file "$grammarsDir/de/monticore/java/JavaDSL.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath "$srcMainDir/java"

    script = "de/monticore/monticore_emf.groovy"

    def upToDate = incCheck("de/monticore/java/JavaDSL.mc4")
    outputs.upToDateWhen { upToDate }
}

dependencies {
    implementation(platform(libs.junit.bom))

    api(libs.monticore.grammar.emf)
    api(libs.monticore.runtime.emf)

    api(libs.emf.common)
    api(libs.emf.ecore)
    api(libs.emf.ecore.xmi)

    grammar(libs.monticore.grammar) {
        capabilities {
            requireCapability("de.monticore:monticore-grammar-grammars")
        }
    }

    testImplementation(libs.junit.jupiter.api)
    testRuntimeOnly(libs.junit.jupiter.engine)
}