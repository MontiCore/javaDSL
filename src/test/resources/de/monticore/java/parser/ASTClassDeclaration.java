/* generated from model null*/
/* generated by template ast.AstClass*/

package de.monticore.javadsl.javadsl._ast;

/* generated by template ast.AstImports*/
import static com.google.common.base.Preconditions.*;
import java.util.Optional;
import de.monticore.symboltable.Symbol;
import de.monticore.symboltable.Scope;
import de.se_rwth.commons.logging.Log;


 public  class ASTClassDeclaration extends /* generated by template ast.AstSuperTypes*/
de.monticore.ast.ASTCNode implements de.monticore.javadsl.javadsl._ast.ASTTypeDeclaration,  ASTJavaDSLNode {
  /* generated by template ast.Attribute*/
   protected  de.monticore.javadsl.javadsl._ast.ASTModifierList modifiers = JavaDSLNodeFactory.createASTModifierList();

  /* generated by template ast.Attribute*/
   protected  String name;

  /* generated by template ast.Attribute*/
   protected  Optional<de.monticore.javadsl.javadsl._ast.ASTTypeParameters> typeParameters = Optional.empty();

  /* generated by template ast.Attribute*/
   protected  Optional<de.monticore.types.types._ast.ASTType> superClass = Optional.empty();

  /* generated by template ast.Attribute*/
   protected  de.monticore.types.types._ast.ASTTypeList implementedInterfaces = de.monticore.types.types._ast.TypesNodeFactory.createASTTypeList();

  /* generated by template ast.Attribute*/
   protected  de.monticore.javadsl.javadsl._ast.ASTClassBody classBody;

  /* generated by template ast.Attribute*/
   public  Optional<? extends Symbol> symbol = Optional.empty();

  /* generated by template ast.Attribute*/
   public  Optional<? extends Scope> enclosingScope = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTClassDeclaration (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }

    /* generated by template ast.Constructor*/
  
   protected  ASTClassDeclaration (/* generated by template ast.ConstructorParametersDeclaration*/
     de.monticore.javadsl.javadsl._ast.ASTModifierList modifiers 
    ,
     String name 
    ,
     de.monticore.javadsl.javadsl._ast.ASTTypeParameters typeParameters 
    ,
     de.monticore.types.types._ast.ASTType superClass 
    ,
     de.monticore.types.types._ast.ASTTypeList implementedInterfaces 
    ,
     de.monticore.javadsl.javadsl._ast.ASTClassBody classBody 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setModifiers(modifiers);
    setName(name);
    setTypeParameters(typeParameters);
    setSuperClass(superClass);
    setImplementedInterfaces(implementedInterfaces);
    setClassBody(classBody);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(de.monticore.javadsl.javadsl._visitor.JavaDSLVisitor visitor)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor);
 
     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     /* generated by template ast.additionalmethods.DeepEquals*/

      ASTClassDeclaration comp;
    if ((o instanceof ASTClassDeclaration)) {
      comp = (ASTClassDeclaration) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing modifiers
    if ( (this.modifiers == null && comp.modifiers != null) || 
      (this.modifiers != null && !this.modifiers.deepEquals(comp.modifiers)) ) {
      return false;
    }
    // comparing typeParameters   
    if ( this.typeParameters.isPresent() != comp.typeParameters.isPresent() ||
      (this.typeParameters.isPresent() && !this.typeParameters.get().deepEquals(comp.typeParameters.get())) ) {
      return false;
    }
    // comparing superClass   
    if ( this.superClass.isPresent() != comp.superClass.isPresent() ||
      (this.superClass.isPresent() && !this.superClass.get().deepEquals(comp.superClass.get())) ) {
      return false;
    }
    // comparing implementedInterfaces
    if ( (this.implementedInterfaces == null && comp.implementedInterfaces != null) || 
      (this.implementedInterfaces != null && !this.implementedInterfaces.deepEquals(comp.implementedInterfaces)) ) {
      return false;
    }
    // comparing classBody
    if ( (this.classBody == null && comp.classBody != null) || 
      (this.classBody != null && !this.classBody.deepEquals(comp.classBody)) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     return deepEquals(o);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTClassDeclaration comp;
    if ((o instanceof ASTClassDeclaration)) {
      comp = (ASTClassDeclaration) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing modifiers
    if ( (this.modifiers == null && comp.modifiers != null) || 
      (this.modifiers != null && !this.modifiers.deepEqualsWithComments(comp.modifiers)) ) {
      return false;
    }
    // comparing typeParameters
    if ( this.typeParameters.isPresent() != comp.typeParameters.isPresent() ||
      (this.typeParameters.isPresent() && !this.typeParameters.get().deepEqualsWithComments(comp.typeParameters.get())) ) {
      return false;
    }
    // comparing superClass
    if ( this.superClass.isPresent() != comp.superClass.isPresent() ||
      (this.superClass.isPresent() && !this.superClass.get().deepEqualsWithComments(comp.superClass.get())) ) {
      return false;
    }
    // comparing implementedInterfaces
    if ( (this.implementedInterfaces == null && comp.implementedInterfaces != null) || 
      (this.implementedInterfaces != null && !this.implementedInterfaces.deepEqualsWithComments(comp.implementedInterfaces)) ) {
      return false;
    }
    // comparing classBody
    if ( (this.classBody == null && comp.classBody != null) || 
      (this.classBody != null && !this.classBody.deepEqualsWithComments(comp.classBody)) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     return deepEqualsWithComments(o);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTClassDeclaration comp;
    if ((o instanceof ASTClassDeclaration)) {
      comp = (ASTClassDeclaration) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
	// comparing symbol 
    if ( this.symbol.isPresent() != comp.symbol.isPresent() ||
       (this.symbol.isPresent() && !this.symbol.get().equals(comp.symbol.get())) ) {
      return false;
    }
	// comparing enclosingScope 
    if ( this.enclosingScope.isPresent() != comp.enclosingScope.isPresent() ||
       (this.enclosingScope.isPresent() && !this.enclosingScope.get().equals(comp.enclosingScope.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o);
 
     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTClassDeclaration comp;
    if ((o instanceof ASTClassDeclaration)) {
      comp = (ASTClassDeclaration) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
    if ( getModifiers() != null ) {
      result.add ( getModifiers() );
    }
    if ( getTypeParameters().isPresent()) {
      result.add ( getTypeParameters().get());
    }
    if ( getSuperClass().isPresent()) {
      result.add ( getSuperClass().get());
    }
    if ( getImplementedInterfaces() != null ) {
      result.add ( getImplementedInterfaces() );
    }
    if ( getClassBody() != null ) {
      result.add ( getClassBody() );
    }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child);
 
     /* generated by template ast.additionalmethods.RemoveChild*/

    if (getModifiers() == child) {
      setModifiers(null);
    }
    if (getTypeParameters().get() == child) {
      setTypeParameters(null);
    }
    if (getSuperClass().get() == child) {
      setSuperClass(null);
    }
    if (getImplementedInterfaces() == child) {
      setImplementedInterfaces(null);
    }
    if (getClassBody() == child) {
      setClassBody(null);
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTClassDeclaration deepClone()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTClassDeclaration deepClone(ASTClassDeclaration result)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result);
 
     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    if (this.modifiers != null) {
      result.setModifiers(this.modifiers.deepClone());
    }
    if (this.name != null) {
      result.name = this.name;
    }
    result.typeParameters = this.typeParameters.isPresent()? Optional.ofNullable((de.monticore.javadsl.javadsl._ast.ASTTypeParameters)this.typeParameters.get().deepClone()) : Optional.empty();
    result.superClass = this.superClass.isPresent()? Optional.ofNullable((de.monticore.types.types._ast.ASTType)this.superClass.get().deepClone()) : Optional.empty();
    if (this.implementedInterfaces != null) {
      result.setImplementedInterfaces(this.implementedInterfaces.deepClone());
    }
    if (this.classBody != null) {
      result.setClassBody((de.monticore.javadsl.javadsl._ast.ASTClassBody) this.classBody.deepClone());
    }
    result.symbol = this.symbol.isPresent()? Optional.ofNullable((Symbol)this.symbol.get()) : Optional.empty();
    result.enclosingScope = this.enclosingScope.isPresent()? Optional.ofNullable((Scope)this.enclosingScope.get()) : Optional.empty();
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTClassDeclaration _construct()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     return new ASTClassDeclaration();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  de.monticore.javadsl.javadsl._ast.ASTModifierList getModifiers()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.modifiers;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  String getName()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.name;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<de.monticore.javadsl.javadsl._ast.ASTTypeParameters> getTypeParameters()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.typeParameters;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<de.monticore.types.types._ast.ASTType> getSuperClass()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.superClass;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  de.monticore.types.types._ast.ASTTypeList getImplementedInterfaces()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.implementedInterfaces;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  de.monticore.javadsl.javadsl._ast.ASTClassBody getClassBody()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.classBody;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<? extends Symbol> getSymbol()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.symbol;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<? extends Scope> getEnclosingScope()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
     /* generated by template ast.additionalmethods.Get*/

    return  this.enclosingScope;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setModifiers(de.monticore.javadsl.javadsl._ast.ASTModifierList modifiers)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(modifiers);
 
     /* generated by template ast.additionalmethods.Set*/

    this.modifiers = modifiers;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setName(String name)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(name);
 
     /* generated by template ast.additionalmethods.Set*/

    this.name = name;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTypeParameters(de.monticore.javadsl.javadsl._ast.ASTTypeParameters typeParameters)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.typeParameters = Optional.ofNullable(typeParameters);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean typeParametersIsPresent()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
       return typeParameters.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSuperClass(de.monticore.types.types._ast.ASTType superClass)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.superClass = Optional.ofNullable(superClass);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean superClassIsPresent()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
       return superClass.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setImplementedInterfaces(de.monticore.types.types._ast.ASTTypeList implementedInterfaces)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(implementedInterfaces);
 
     /* generated by template ast.additionalmethods.Set*/

    this.implementedInterfaces = implementedInterfaces;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setClassBody(de.monticore.javadsl.javadsl._ast.ASTClassBody classBody)
   
    { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(classBody);
 
     /* generated by template ast.additionalmethods.Set*/

    this.classBody = classBody;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSymbol(Symbol symbol)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.symbol = Optional.ofNullable(symbol);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean symbolIsPresent()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
       return symbol.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setEnclosingScope(Scope enclosingScope)
   
    { 
     
     /* generated by template ast.additionalmethods.Set*/

    this.enclosingScope = Optional.ofNullable(enclosingScope);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean enclosingScopeIsPresent()
   
    { 
     /* generated by template ast.ErrorIfNull*/
 
       return enclosingScope.isPresent(); 

  } 

   
  /* generated by template ast.ClassContent*/
  // Class content
    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTClassDeclaration}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  de.monticore.javadsl.javadsl._ast.ASTModifierList modifiers = JavaDSLNodeFactory.createASTModifierList();

    /* generated by template ast.BuilderAttribute*/
     protected  String name;

    /* generated by template ast.BuilderAttribute*/
     protected  de.monticore.javadsl.javadsl._ast.ASTTypeParameters typeParameters;

    /* generated by template ast.BuilderAttribute*/
     protected  de.monticore.types.types._ast.ASTType superClass;

    /* generated by template ast.BuilderAttribute*/
     protected  de.monticore.types.types._ast.ASTTypeList implementedInterfaces = de.monticore.types.types._ast.TypesNodeFactory.createASTTypeList();

    /* generated by template ast.BuilderAttribute*/
     protected  de.monticore.javadsl.javadsl._ast.ASTClassBody classBody;

    public ASTClassDeclaration build() {
      return new ASTClassDeclaration (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.modifiers 
           ,
       this.name 
           ,
       this.typeParameters 
           ,
       this.superClass 
           ,
       this.implementedInterfaces 
           ,
       this.classBody 
     
      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder modifiers(de.monticore.javadsl.javadsl._ast.ASTModifierList modifiers) {
      this.modifiers = modifiers;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder name(String name) {
      this.name = name;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder typeParameters(de.monticore.javadsl.javadsl._ast.ASTTypeParameters typeParameters) {
      this.typeParameters = typeParameters;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder superClass(de.monticore.types.types._ast.ASTType superClass) {
      this.superClass = superClass;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder implementedInterfaces(de.monticore.types.types._ast.ASTTypeList implementedInterfaces) {
      this.implementedInterfaces = implementedInterfaces;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder classBody(de.monticore.javadsl.javadsl._ast.ASTClassBody classBody) {
      this.classBody = classBody;
      return this;
    }

  }    
  
}