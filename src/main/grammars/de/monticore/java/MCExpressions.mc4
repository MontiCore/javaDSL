package de.monticore.java;

component grammar MCExpressions extends de.monticore.types.Types {

interface Expression;

QualifiedNameExpression implements Expression <290> = 
	Expression "." Name;
	
ThisExpression implements Expression <280> =
	Expression "." ["this"];
	
SuperExpression implements Expression <270> =
	Expression "." "super" SuperSuffix;
	
ExplicitGenericInvocationExpression implements Expression <260> =
	Expression "." ExplicitGenericInvocation;
	
ArrayExpression implements Expression <250> =
	Expression "[" indexExpression:Expression "]";
	
CallExpression implements Expression <240> =
	Expression Arguments;
	
TypeCastExpression implements Expression <230> =
	"(" Type ")" Expression;
	
SuffixExpression implements Expression <220> =
	Expression
        (   suffixOp:"++"
        |   suffixOp:"--"
        );
        
PrefixExpression implements Expression <210> =
	(   prefixOp:"+"
        |   prefixOp:"-"
        |   prefixOp:"++"
        |   prefixOp:"--"
        )
        Expression;
        
BooleanNotExpression implements Expression <200> =
	"~"  Expression;
	
LogicalNotExpression implements Expression <199> =
	"!" Expression;
	
MultExpression implements Expression <190> =
	leftExpression:Expression
        (   multiplicativeOp:"*"
        |   multiplicativeOp:"/"
        |   multiplicativeOp:"%"
        )
        rightExpression:Expression;
        
AddExpression implements Expression <180> =
	leftExpression:Expression
        (   additiveOp:"+"
        |   additiveOp:"-"
        )
		rightExpression:Expression;
		
ShiftExpression implements Expression <170> =
	leftExpression:Expression
	    // It is not possible to define "<<", ">>" or ">>>".
        // Parsing generic typs like "List<List<String>>" leads to problems.
        (   shiftOp:"<" "<"
          {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) && 
          	(_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?
          {_aNode.setShiftOp("<<");}     
        |   shiftOp:">" ">" ">"
          {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) && 
            (_input.LT(-3).getLine()==_input.LT(-2).getLine()) &&
            (_input.LT(-2).getCharPositionInLine()==_input.LT(-3).getCharPositionInLine()+1) &&
          	(_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?        
         {_aNode.setShiftOp(">>>");}      
        |   shiftOp:">" ">"
         {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) && 
          	(_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?
         {_aNode.setShiftOp(">>");}      
        )
        rightExpression:Expression;
        
ComparisonExpression implements Expression <160> =
	leftExpression:Expression
        (   comparison:"<="
        |   comparison:">=" 
        |   comparison:">" 
        |   comparison:"<"
        )
        rightExpression:Expression;
        
InstanceofExpression implements Expression <150> =
	Expression "instanceof" Type;
	
IdentityExpression implements Expression <140> =
	leftExpression:Expression
        (   identityTest:"=="
        |   identityTest:"!="
        )
        rightExpression:Expression;
        
BinaryAndOpExpression implements Expression <130> =
	leftExpression:Expression "&"  rightExpression:Expression;
	
BinaryXorOpExpression implements Expression <120> =
	leftExpression:Expression "^"  rightExpression:Expression;
	
BinaryOrOpExpression implements Expression <110> =
	leftExpression:Expression "|"  rightExpression:Expression;
	
BooleanAndOpExpression implements Expression <100> =
	leftExpression:Expression "&&" rightExpression:Expression;
	
BooleanOrOpExpression implements Expression <90> =
	leftExpression:Expression "||" rightExpression:Expression;
	
ConditionalExpression implements Expression <80> =
	condition:Expression "?" trueExpression:Expression ":" falseExpression:Expression;
	
AssignmentExpression implements Expression <70> = <rightassoc>
	leftExpression:Expression
        (   assignment:"="
        |   assignment:"+="
        |   assignment:"-="
        |   assignment:"*="
        |   assignment:"/="
        |   assignment:"&="
        |   assignment:"|="
        |   assignment:"^="
        |   assignment:">>="
        |   assignment:">>>="
        |   assignment:"<<="
        |   assignment:"%="
        )
        rightExpression:Expression;

PrimaryExpression implements Expression <300>
    =  "(" Expression ")"
    |   ["this"]
    |   ["super"] 
    |   Literal
    |   Name
    |   ReturnType "." "class"
    |   ExplicitGenericInvocation
    |   TypeArguments "this" Arguments
    ;

ExplicitGenericInvocation
    =   TypeArguments ExplicitGenericInvocationSuffix
    ;
    
ExplicitGenericInvocationSuffix
    =   "super" SuperSuffix
    |   Name Arguments
    ;
    
SuperSuffix
    =   Arguments
    |   "." TypeArguments? Name Arguments?
    ;

Arguments
    =   "(" (Expression || ",")* ")"
    ;
}
