/* (c) https://github.com/MontiCore/monticore */

package de.monticore.java;

/**
 * The full grammar dependency tree as of 7.4
 *
 * JavaDSL
 * |-> de.monticore.JavaLight
 *     |-> de.monticore.expressions.AssignmentExpressions
 *         |-> de.monticore.expressions.ExpressionsBasis
 *             |-> de.monticore.MCBasics
 *             |-> de.monticore.literals.MCLiteralsBasis
 *     |-> de.monticore.expressions.JavaClassExpressions
 *         |-> de.monticore.expressions.CommonExpressions
 *             |-> de.monticore.expressions.ExpressionsBasis (*)
 *     |-> de.monticore.statements.MCArrayStatements
 *         |-> de.monticore.statements.MCVarDeclarationStatements
 *             |-> de.monticore.expressions.ExpressionsBasis (*)
 *             |-> de.monticore.statements.MCStatementsBasis
 *             |-> de.monticore.symbols.OOSymbols
 *                 |-> de.monticore.symbols.BasicSymbols
 *                     |-> de.monticore.MCBasics (*)
 *             |-> de.monticore.types.MCBasicTypes
 *                 |-> de.monticore.MCBasics (*)
 *     |-> de.monticore.statements.MCCommonStatements
 *         |-> de.monticore.statements.MCVarDeclarationStatements (*)
 *     |-> de.monticore.statements.MCReturnStatements
 *         |-> de.monticore.expressions.ExpressionsBasis (*)
 *         |-> de.monticore.statements.MCStatementsBasis (*)
 * |-> de.monticore.expressions.BitExpressions
 *     |-> de.monticore.expressions.ExpressionsBasis (*)
 * |-> de.monticore.literals.MCJavaLiterals
 *     |-> de.monticore.literals.MCCommonLiterals (*)
 *         |-> de.monticore.MCBasics (*)
 *         |-> de.monticore.literals.MCLiteralsBasis (*)
 * |-> de.monticore.statements.MCFullJavaStatements
 *     |-> de.monticore.statements.MCArrayStatements (*)
 *     |-> de.monticore.statements.MCAssertStatements
 *         |-> de.monticore.expressions.ExpressionsBasis (*)
 *         |-> de.monticore.statements.MCStatementsBasis (*)
 *     |-> de.monticore.statements.MCExceptionStatements
 *         |-> de.monticore.statements.MCCommonStatements (*)
 *     |-> de.monticore.statements.MCLowLevelStatements
 *         |-> de.monticore.MCBasics (*)
 *         |-> de.monticore.statements.MCStatementsBasis (*)
 *     |-> de.monticore.statements.MCReturnStatements (*)
 *     |-> de.monticore.statements.MCSynchronizedStatements
 *         |-> de.monticore.statements.MCCommonStatements (*)
 * |-> de.monticore.types.MCArrayTypes
 *     |-> de.monticore.types.MCBasicTypes
 *         |-> de.monticore.MCBasics (*)
 * |-> de.monticore.types.MCFullGenericTypes
 *     |-> de.monticore.types.MCSimpleGenericTypes
 *         |-> de.monticore.types.MCCollectionTypes
 *             |-> de.monticore.types.MCBasicTypes (*)
 *
 * (*) Dependencies are emitted because they have been listed previously.
 */
grammar JavaDSL extends de.monticore.JavaLight,
	de.monticore.expressions.BitExpressions,
	de.monticore.literals.MCJavaLiterals,
	de.monticore.statements.MCFullJavaStatements,
	de.monticore.types.MCArrayTypes,
	de.monticore.types.MCFullGenericTypes,
  de.monticore.expressions.LambdaExpressions { // TODO: move to JavaLight?

start CompilationUnit;

// starting point for parsing a java file
scope CompilationUnit
    =   PackageDeclaration? ImportDeclaration* TypeDeclaration*
    ;

PackageDeclaration
    =   Annotation* "package" MCQualifiedName ";"
    ;

ImportDeclaration
    =   "import" (["static"])? MCQualifiedName ("." ["*"])? ";"
    ;

// Type declarations
abstract symbol scope TypeDeclaration implements ClassMemberDeclaration, InterfaceMemberDeclaration, AnnotationTypeElementDeclaration, MCBlockStatement, OOType = Name ;

symbolrule TypeDeclaration =
    isAnnotation: boolean ;

symbol scope ClassDeclaration extends TypeDeclaration
    =   JavaModifier* "class" Name TypeParameters?
        ("extends" superClass:MCType)?
        ("implements" implementedInterface:(MCType || ",")+)?
        ClassBody
    ;

symbolrule ClassDeclaration =
    superInterface:MCType*
    constructor: de.monticore.javalight._symboltable.JavaMethodSymbol*
    methods: de.monticore.javalight._symboltable.JavaMethodSymbol* ;

ClassBody
    =   "{" ClassBodyDeclaration* "}"
    ;
    
symbol scope InterfaceDeclaration extends TypeDeclaration
    =   JavaModifier* "interface" Name TypeParameters?
        ("extends" extendedInterface:(MCType || ",")+)?
        InterfaceBody
    ;

InterfaceBody
    =   "{" InterfaceBodyDeclaration* "}"
    ;

symbol scope EnumDeclaration extends TypeDeclaration
    =   JavaModifier* "enum" Name
        ("implements" implementedInterface:(MCType || ",")+)?
        "{" (EnumConstantDeclaration || ",")* ","? EnumBody? "}"
    ;

symbolrule EnumDeclaration =
    constructor: de.monticore.javalight._symboltable.JavaMethodSymbol*
    methods: de.monticore.javalight._symboltable.JavaMethodSymbol*;

symbol EnumConstantDeclaration
    =   Annotation* Name Arguments? ClassBody?
    ;

EnumBody
    =   ";" ClassBodyDeclaration*
    ;

TypeParameters
    =   "<" (TypeParameter || ",")+ ">"
    ;

symbol TypeParameter
    =   Name ("extends" TypeBound)?
    ;

TypeBound
    =   (MCType || "&")+
    ;

ClassBlock implements ClassBodyDeclaration
    =   (["static"])? JavaBlock
    ;

interface ClassMemberDeclaration extends ClassBodyDeclaration ;

interface MethodBody ;

interface ConstructorBody ;

FieldDeclaration implements ClassMemberDeclaration
    =   JavaModifier* MCType (VariableDeclarator || ",")+ ";"
    ;

interface InterfaceMemberDeclaration extends InterfaceBodyDeclaration ;

ConstantDeclarator
    =   Name (dim:"[" "]")* "=" VariableInititializerOrExpression
    ;

interface VariableInitializer;

VariableInititializerOrExpression
	= VariableInitializer | Expression;

ArrayInitializer implements VariableInitializer
    =   "{" (VariableInititializerOrExpression || ",")* (",")? "}"
    ;

// ANNOTATIONS

symbol scope AnnotationTypeDeclaration extends TypeDeclaration
    =   JavaModifier* "@" "interface" Name AnnotationTypeBody
    ;

AnnotationTypeBody
    =   "{" (AnnotationTypeElementDeclaration)* "}"
    ;

interface AnnotationTypeElementDeclaration ;

symbol scope AnnotationMethod implements AnnotationTypeElementDeclaration
    =   JavaModifier* MCType Name "(" ")" DefaultValue? ";"
    ;

AnnotationConstant implements AnnotationTypeElementDeclaration
    =   JavaModifier* MCType (VariableDeclarator || ",")+ ";"
    ;

DefaultValue
    =   "default" ElementValueOrExpr
    ;

// STATEMENTS / BLOCKS

interface Statement extends MCBlockStatement ;

scope JavaBlock implements Statement, MethodBody, ConstructorBody, FinallyBlock
    =   "{" MCBlockStatement* "}"
    ;

scope TryStatement implements Statement
    =   "try" JavaBlock ExceptionHandler
    ;

interface ExceptionHandler ;

CatchExceptionsHandler implements ExceptionHandler
    =   CatchClause+ ("finally" FinallyBlock)?
    ;

FinallyBlockOnlyHandler implements ExceptionHandler
    =   ("finally" FinallyBlock)
    ;

TryStatementWithResources implements Statement
    =   "try" "(" (Resource || ";")+ ";"? ")" JavaBlock CatchClause* ("finally" FinallyBlock)?
    ;

Resource
    =   JavaModifier* MCType DeclaratorId "=" Expression
    ;

IdentifierAndTypeArgument
    =   Name TypeArguments?
    ;

TypeArguments
    =   "<" (MCTypeArgument || ",")* ">"
    ;

interface FinallyBlock ;

LabeledStatement implements Statement
    =   label:Name ":" Statement
    ;

CreatedName
    =   (IdentifierAndTypeArgument || ".")+
    |   MCPrimitiveType
    ;

InnerCreator
    =   firstTypeArguments:TypeArguments? Name secondTypeArguments:TypeArguments? ClassCreatorRest
    ;
    
ClassCreatorRest
    =   Arguments ClassBody?
    ;

@Override ExtType = MCType;

ExtLiteral = Literal;

@Override ExtReturnType = MCReturnType;

@Override ExtTypeArgument = MCTypeArgument;

ExtTypeParameter = TypeParameter;
@Override ExtTypeParameters = TypeParameters;

/*
 * TODO Remove this
 * This is a workaround to a questionable behavior in the core grammar JavaLight
 * where the production "Annotation" does not extend "JavaModifier" whereas
 * various productions use JavaModifier in places where annotations are allowed.
 *
 * We cannot override the Annotation production because we already extend
 * JavaModifier either, so we'll have to live with a separate production for now.
 */
JavaAnnotation extends JavaModifier implements ElementValue
    =   "@" annotationName:MCQualifiedName
            ( "(" AnnotationArguments? ")" )?
    ;

@Override
AnonymousClass implements Creator
    =   ExtType Arguments ClassBody?
    ;

}
